//------------------------------------------------
//--- 010 Editor v15.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

typedef enum <ubyte>
{
    Z4             = 0x01,
    Z8             = 0x02,
    Z32_I          = 0x06,
    W5X5Y5Z1       = 0x43,
    X5Y6Z5         = 0x44,
    Y8Z8           = 0x4A,
    WXYZ4_UNORM    = 0x4F,
    DXT1           = 0x52,
    DXT3           = 0x53,
    DXT5           = 0x54,
    Z16            = 0x58,
    YZ16           = 0x59,
    WXYZ16         = 0x5A,
    WXYZ16_FLOAT   = 0x60,
    WXYZ8_UNORM    = 0x86,
    D24S8          = 0x96,
    R32_FLOAT      = 0x97,
    Z32_FLOAT      = 0xA4,
    YZ32           = 0xA5,
    WXYZ32_FLOAT   = 0xA6,
    WXT10_Z2       = 0xB6,
    W2XYZ10_FLOAT  = 0xBF,
} text_type;

local ubyte other_map[128] = {
    0x00, 0x01, 0x00, 0x01, 0x20, 0x08, 0x20, 0x10, 0x20, 0x10, 0x20, 0x10, 0x30, 0x20, 0x32, 0x20,
    0x20, 0x08, 0x20, 0x08, 0x20, 0x10, 0x00, 0x10, 0x00, 0x10, 0x14, 0x20, 0x20, 0x20, 0x20, 0x10,
    0x20, 0x20, 0x20, 0x20, 0x00, 0x04, 0x00, 0x08, 0x00, 0x08, 0x15, 0x40, 0x10, 0x20, 0x11, 0x20,
    0x20, 0x10, 0x20, 0x20, 0x20, 0x40, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x20, 0x10, 0x36, 0x20,
    0x37, 0x40, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x3E, 0x20, 0x3F, 0x40, 0x20, 0x80, 0x00, 0x08,
    0x00, 0x10, 0x00, 0x10, 0x00, 0x20, 0x00, 0x08, 0x00, 0x08, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10,
    0x00, 0x20, 0x00, 0x08, 0x00, 0x20, 0x00, 0x04, 0x00, 0x08, 0x00, 0x08, 0x12, 0x20, 0x00, 0x20,
    0x00, 0x20, 0x00, 0x60, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x11, 0x20, 0x13, 0x20
};

typedef struct (int i){
    local int i<hidden=true> = i;
    // |= 0x7E00 for sRGB
    uint full<hidden=true>;
    FSkip(-4);
    ushort channel1:4; 
    ushort channel2:4; 
    ushort channel3:4;
    ushort channel4:4;
    ubyte flag;
    text_type format<format=hex>;
    local byte clamped<format=hex> = full & 0x3F;
    local uint sRGB<format=hex> = full | 0x7E;
    local int other<format=hex> = other_map[(full * 2) & 0x7E];
    local int BPP<format=hex> = other_map[((full * 2) & 0x7E) + 1];
} entry<read=Str("0x%02X",this.i)>;
local int i = 0;
local int count = FileSize() / 4;
BigEndian();
for (i = 0; i < count; i++){
    if(ReadInt() == -1){
        FSkip(4);
    } else {
        entry data(i)<open=true>;
    }
};