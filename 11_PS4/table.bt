//------------------------------------------------
//--- 010 Editor v14.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
//------------------------------------------------
//--- 010 Editor v14.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
typedef enum <uint> 
{
    NONE,
    SCE_VIDEO_OUT_PIXEL_FORMAT_B8_G8_R8_A8_SRGB         = 0x80000000,
    SCE_VIDEO_OUT_PIXEL_FORMAT_B16_G16_R16_A16_FLOAT    = 0xC1060000,
    SCE_VIDEO_OUT_PIXEL_FORMAT_R8_G8_B8_A8_SRGB         = 0x80002200,
    SCE_VIDEO_OUT_PIXEL_FORMAT_B10_G10_R10_A2           = 0x88060000,
    SCE_VIDEO_OUT_PIXEL_FORMAT_B10_G10_R10_A2_SRGB      = 0x88000000,
    SCE_VIDEO_OUT_PIXEL_FORMAT_B10_G10_R10_A2_BT2020_PQ = 0x88740000,
    SCE_VIDEO_OUT_PIXEL_FORMAT_YCBCR420_BT709           = 0x08322200,
    SCE_VIDEO_OUT_REFRESH_RATE_ANY                      = 0xFFFFFFFF,
} TEX_ENUMS;

local TEX_ENUMS DIRECT_OUT[128] = {
/*0x00*/ 0,
/*0x01*/ SCE_VIDEO_OUT_PIXEL_FORMAT_B8_G8_R8_A8_SRGB,
/*0x02*/ 0,
/*0x03*/ 0,
/*0x04*/ 0,
/*0x05*/ 0,
/*0x06*/ 0,
/*0x07*/ 0,
/*0x08*/ 0,
/*0x09*/ 0,
/*0x0A*/ SCE_VIDEO_OUT_PIXEL_FORMAT_B8_G8_R8_A8_SRGB,
/*0x0B*/ 0,
/*0x0C*/ SCE_VIDEO_OUT_PIXEL_FORMAT_B16_G16_R16_A16_FLOAT,
/*0x0D*/ 0,
/*0x0E*/ 0,
/*0x0F*/ 0,
/*0x10*/ 0,
/*0x11*/ 0,
/*0x12*/ 0,
/*0x13*/ 0,
/*0x14*/ 0,
/*0x15*/ 0,
/*0x16*/ 0,
/*0x17*/ 0,
/*0x18*/ 0,
/*0x19*/ 0,
/*0x1A*/ 0,
/*0x1B*/ 0,
/*0x1C*/ 0,
/*0x1D*/ 0,
/*0x1E*/ 0,
/*0x1F*/ 0,
/*0x20*/ 0,
/*0x21*/ SCE_VIDEO_OUT_PIXEL_FORMAT_B8_G8_R8_A8_SRGB,
/*0x22*/ SCE_VIDEO_OUT_PIXEL_FORMAT_B8_G8_R8_A8_SRGB,
/*0x23*/ 0,
/*0x24*/ 0,
/*0x25*/ 0,
/*0x26*/ 0,
/*0x27*/ 0,
/*0x28*/ 0,
/*0x29*/ 0,
/*0x2A*/ 0,
/*0x2B*/ 0,
/*0x2C*/ 0,
/*0x2D*/ 0,
/*0x2E*/ 0,
/*0x2F*/ 0,
/*0x30*/ 0,
/*0x31*/ 0,
/*0x32*/ 0,
/*0x33*/ 0,
/*0x34*/ 0,
/*0x35*/ 0,
/*0x36*/ 0,
/*0x37*/ 0,
/*0x38*/ 0,
/*0x39*/ 0,
/*0x3A*/ 0,
/*0x3B*/ 0,
/*0x3C*/ 0,
/*0x3D*/ 0,
/*0x3E*/ 0,
/*0x3F*/ 0,
/*0x40*/ SCE_VIDEO_OUT_PIXEL_FORMAT_B10_G10_R10_A2,
/*0x41*/ 0,
/*0x42*/ SCE_VIDEO_OUT_PIXEL_FORMAT_B10_G10_R10_A2,
/*0x43*/ 0,
/*0x44*/ 0,
/*0x45*/ 0,
/*0x46*/ 0,
/*0x47*/ 0,
/*0x48*/ 0,
/*0x49*/ 0,
/*0x4A*/ 0,
/*0x4B*/ 0,
/*0x4C*/ 0,
/*0x4D*/ 0,
/*0x4E*/ 0,
/*0x4F*/ 0,
/*0x50*/ 0,
/*0x51*/ 0,
/*0x52*/ 0,
/*0x53*/ 0,
/*0x54*/ 0,
/*0x55*/ 0,
/*0x56*/ 0,
/*0x57*/ 0,
/*0x58*/ 0,
/*0x59*/ 0,
/*0x5A*/ 0,
/*0x5B*/ 0,
/*0x5C*/ 0,
/*0x5D*/ 0,
/*0x5E*/ 0,
/*0x5F*/ 0,
/*0x60*/ 0,
/*0x61*/ 0,
/*0x62*/ 0,
/*0x63*/ 0,
/*0x64*/ 0,
/*0x65*/ 0,
/*0x66*/ 0,
/*0x67*/ 0,
/*0x68*/ 0,
/*0x69*/ 0,
/*0x6A*/ 0,
/*0x6B*/ 0,
/*0x6C*/ 0,
/*0x6D*/ 0,
/*0x6E*/ 0,
/*0x6F*/ 0,
/*0x70*/ 0,
/*0x71*/ 0,
/*0x72*/ 0,
/*0x73*/ 0,
/*0x74*/ 0,
/*0x75*/ 0,
/*0x76*/ 0,
/*0x77*/ 0,
/*0x78*/ 0,
/*0x79*/ 0,
/*0x7A*/ 0,
/*0x7B*/ 0,
/*0x7C*/ 0,
/*0x7D*/ 0,
/*0x7E*/ 0,
/*0x7F*/ 0 
};  

local int BPP_LIST[61] ={
    0,   //0x00
    8,   //0x01
    16,  //0x02
    16,  //0x03
    
    32,  //0x04
    32,  //0x05
    32,  //0x06
    32,  //0x07
    
    32,  //0x08
    32,  //0x09
    32,  //0x0A
    64,  //0x0B
    
    64,  //0x0C
    96,  //0x0D
    128, //0x0E
    -1,  //0x0F
    
    16,  //0x10
    16,  //0x11
    16,  //0x12
    16,  //0x13
    
    32,  //0x14
    32,  //0x15
    64,  //0x16
    -1,  //0x17
    
    -1,  //0x18
    -1,  //0x19
    -1,  //0x1A
    -1,  //0x1B
    
    -1,  //0x1C
    -1,  //0x1D
    -1,  //0x1E
    -1,  //0x1F
    
    16,  //0x20
    16,  //0x21
    32,  //0x22
    4,   //0x23
    
    8,   //0x24
    8,   //0x25
    4,   //0x26
    8,   //0x27
    
    8,   //0x28
    8,   //0x29
    -1,  //0x2A
    -1,  //0x2B
    
    8,   //0x2C
    8,   //0x2D
    8,   //0x2E
    8,   //0x2F
    
    8,   //0x30
    8,   //0x31
    16,  //0x32
    16,  //0x33
    
    32,  //0x34
    32,  //0x35
    32,  //0x36
    64,  //0x37
    
    64,  //0x38
    8,   //0x39
    16,  //0x3A
    1,   //0x3B
    
    1    //0x3C
};

local int COLOR_CHANNEL_LIST[61] ={
    0,  //0x00
    1,  //0x01
    1,  //0x02
    2,  //0x03

    1,  //0x04
    2,  //0x05
    3,  //0x06
    3,  //0x07

    4,  //0x08
    4,  //0x09
    4,  //0x0A
    2,  //0x0B

    4,  //0x0C
    3,  //0x0D
    4,  //0x0E
    -1, //0x0F

    3,  //0x10
    4,  //0x11
    4,  //0x12
    4,  //0x13

    2,  //0x14
    2,  //0x15
    2,  //0x16
    -1, //0x17

    -1, //0x18
    -1, //0x19
    -1, //0x1A
    -1, //0x1B

    -1, //0x1C
    -1, //0x1D
    -1, //0x1E
    -1, //0x1F

    3,  //0x20
    3,  //0x21
    3,  //0x22
    4,  //0x23

    4,  //0x24
    4,  //0x25
    1,  //0x26
    2,  //0x27

    3,  //0x28
    4,  //0x29
    -1, //0x2A
    -1, //0x2B

    2,  //0x2C
    2,  //0x2D
    2,  //0x2E
    2,  //0x2F

    2,  //0x30
    2,  //0x31
    2,  //0x32
    2,  //0x33

    2,  //0x34
    2,  //0x35
    2,  //0x36
    2,  //0x37

    2,  //0x38
    2,  //0x39
    3,  //0x3A
    1,  //0x3B

    1   //0x3C
    
};

typedef enum <byte>
{
	kTextureChannelTypeUNorm                 = 0x00000000, ///< Stored as <c>uint X\<N</c>, interpreted as <c>float X/(N-1)</c>.
	kTextureChannelTypeSNorm                 = 0x00000001, ///< Stored as <c>int -N/2\<=X\<N/2</c>, interpreted as <c>float MAX(-1,X/(N/2-1))</c>.
	kTextureChannelTypeUScaled               = 0x00000002, ///< Stored as <c>uint X\<N</c>, interpreted as <c>float X</c>.
	kTextureChannelTypeSScaled               = 0x00000003, ///< Stored as <c>int -N/2\<=X\<N/2</c>, interpreted as <c>float X</c>.
	kTextureChannelTypeUInt                  = 0x00000004, ///< Stored as <c>uint X\<N</c>, interpreted as <c>uint X</c>. Not filterable.
	kTextureChannelTypeSInt                  = 0x00000005, ///< Stored as <c>int -N/2\<=X\<N/2</c>, interpreted as <c>int X</c>. Not filterable.
	kTextureChannelTypeSNormNoZero           = 0x00000006, ///< Stored as <c>int -N/2\<=X\<N/2</c>, interpreted as <c>float ((X+N/2)/(N-1))*2-1</c>.
	kTextureChannelTypeFloat                 = 0x00000007, ///< Stored as <c>float</c>, interpreted as <c>float</c>.
															///<  – 32-bit: SE8M23, bias 127, range <c>(-2^129..2^129)</c>
															///<  – 16-bit: SE5M10, bias 15, range <c>(-2^17..2^17)</c>
															///<  – 11-bit: E5M6 bias 15, range <c>[0..2^17)</c>
															///<  – 10-bit: E5M5 bias 15, range <c>[0..2^17)</c>
	kTextureChannelTypeSrgb                  = 0x00000009, ///< Stored as <c>uint X\<N</c>, interpreted as <c>float sRGB(X/(N-1))</c>. Srgb only applies to the XYZ channels of the texture; the W channel is always linear.
	kTextureChannelTypeUBNorm                = 0x0000000A, ///< Stored as <c>uint X\<N</c>, interpreted as <c>float MAX(-1,(X-N/2)/(N/2-1))</c>.
	kTextureChannelTypeUBNormNoZero          = 0x0000000B, ///< Stored as <c>uint X\<N</c>, interpreted as <c>float (X/(N-1))*2-1</c>.
	kTextureChannelTypeUBInt                 = 0x0000000C, ///< Stored as <c>uint X\<N</c>, interpreted as <c>int X-N/2</c>. Not blendable or filterable.
	kTextureChannelTypeUBScaled              = 0x0000000D, ///< Stored as <c>uint X\<N</c>, interpreted as <c>float X-N/2</c>.
} TextureChannelType;

typedef enum <ubyte>
{
	kBufferChannelConstant0                 = 0x00000000, ///< Destination channel will contain a constant 0.0.
	kBufferChannelConstant1                 = 0x00000001, ///< Destination channel will contain a constant 1.0.
	kBufferChannelRed                       = 0x00000004, ///< Destination channel will contain the source's X channel.
	kBufferChannelGreen                     = 0x00000005, ///< Destination channel will contain the source's Y channel.
	kBufferChannelBlue                      = 0x00000006, ///< Destination channel will contain the source's Z channel.
	kBufferChannelAlpha                     = 0x00000007, ///< Destination channel will contain the source's W channel.
} BufferChannel;

typedef enum <ubyte>
{
	kSurfaceFormatInvalid                               = 0x00000000, ///< Invalid surface format.
	kSurfaceFormat8                                     = 0x00000001, ///< One 8-bit channel. X=0xFF
	kSurfaceFormat16                                    = 0x00000002, ///< One 16-bit channel. X=0xFFFF
	kSurfaceFormat8_8                                   = 0x00000003, ///< Two 8-bit channels. X=0x00FF, Y=0xFF00
	kSurfaceFormat32                                    = 0x00000004, ///< One 32-bit channel. X=0xFFFFFFFF
	kSurfaceFormat16_16                                 = 0x00000005, ///< Two 16-bit channels. X=0x0000FFFF, Y=0xFFFF0000
	kSurfaceFormat10_11_11                              = 0x00000006, ///< One 10-bit channel (Z) and two 11-bit channels (Y,X). X=0x000007FF, Y=0x003FF800, Z=0xFFC00000 Interpreted only as floating-point by texture unit, but also as integer by rasterizer.
	kSurfaceFormat11_11_10                              = 0x00000007, ///< Two 11-bit channels (Z,Y) and one 10-bit channel (X). X=0x000003FF, Y=0x001FFC00, Z=0xFFE00000 Interpreted only as floating-point by texture unit, but also as integer by rasterizer.
	kSurfaceFormat10_10_10_2                            = 0x00000008, ///< Three 10-bit channels (W,Z,Y) and one 2-bit channel (X). X=0x00000003, Y=0x00000FFC, Z=0x003FF000, W=0xFFC00000 X is never negative, even when YZW are.
	kSurfaceFormat2_10_10_10                            = 0x00000009, ///< One 2-bit channel (W) and three 10-bit channels (Z,Y,X). X=0x000003FF, Y=0x000FFC00, Z=0x3FF00000, W=0xC0000000 W is never negative, even when XYZ are.
	kSurfaceFormat8_8_8_8                               = 0x0000000a, ///< Four 8-bit channels. X=0x000000FF, Y=0x0000FF00, Z=0x00FF0000, W=0xFF000000
	kSurfaceFormat32_32                                 = 0x0000000b, ///< Two 32-bit channels.
	kSurfaceFormat16_16_16_16                           = 0x0000000c, ///< Four 16-bit channels.
	kSurfaceFormat32_32_32                              = 0x0000000d, ///< Three 32-bit channels.
	kSurfaceFormat32_32_32_32                           = 0x0000000e, ///< Four 32-bit channels.
	kSurfaceFormat5_6_5                                 = 0x00000010, ///< One 5-bit channel (Z), one 6-bit channel (Y), and a second 5-bit channel (X). X=0x001F, Y=0x07E0, Z=0xF800
	kSurfaceFormat1_5_5_5                               = 0x00000011, ///< One 1-bit channel (W) and three 5-bit channels (Z,Y,X). X=0x001F, Y=0x03E0, Z=0x7C00, W=0x8000
	kSurfaceFormat5_5_5_1                               = 0x00000012, ///< Three 5-bit channels (W,Z,Y) and one 1-bit channel (X). X=0x0001, Y=0x003E, Z=0x07C0, W=0xF800
	kSurfaceFormat4_4_4_4                               = 0x00000013, ///< Four 4-bit channels. X=0x000F, Y=0x00F0, Z=0x0F00, W=0xF000
	kSurfaceFormat8_24                                  = 0x00000014, ///< One 8-bit channel and one 24-bit channel.
	kSurfaceFormat24_8                                  = 0x00000015, ///< One 24-bit channel and one 8-bit channel.
	kSurfaceFormatX24_8_32                              = 0x00000016, ///< One 24-bit channel, one 8-bit channel, and one 32-bit channel.
	kSurfaceFormatGB_GR                                 = 0x00000020, ///< To be documented.
	kSurfaceFormatBG_RG                                 = 0x00000021, ///< To be documented.
	kSurfaceFormat5_9_9_9                               = 0x00000022, ///< One 5-bit channel (W) and three 9-bit channels (Z,Y,X). X=0x000001FF, Y=0x0003FE00, Z=0x07FC0000, W=0xF8000000. Interpreted only as three 9-bit denormalized mantissas, and one shared 5-bit exponent.
	kSurfaceFormatBc1                                   = 0x00000023, ///< BC1 block-compressed surface.
	kSurfaceFormatBc2                                   = 0x00000024, ///< BC2 block-compressed surface.
	kSurfaceFormatBc3                                   = 0x00000025, ///< BC3 block-compressed surface.
	kSurfaceFormatBc4                                   = 0x00000026, ///< BC4 block-compressed surface.
	kSurfaceFormatBc5                                   = 0x00000027, ///< BC5 block-compressed surface.
	kSurfaceFormatBc6                                   = 0x00000028, ///< BC6 block-compressed surface.
	kSurfaceFormatBc7                                   = 0x00000029, ///< BC7 block-compressed surface.
	kSurfaceFormatFmask8_S2_F1                          = 0x0000002C, ///< 8 bits-per-element FMASK surface (2 samples, 1 fragment).
	kSurfaceFormatFmask8_S4_F1                          = 0x0000002D, ///< 8 bits-per-element FMASK surface (4 samples, 1 fragment).
	kSurfaceFormatFmask8_S8_F1                          = 0x0000002E, ///< 8 bits-per-element FMASK surface (8 samples, 1 fragment).
	kSurfaceFormatFmask8_S2_F2                          = 0x0000002F, ///< 8 bits-per-element FMASK surface (2 samples, 2 fragments).
	kSurfaceFormatFmask8_S4_F2                          = 0x00000030, ///< 8 bits-per-element FMASK surface (8 samples, 2 fragments).
	kSurfaceFormatFmask8_S4_F4                          = 0x00000031, ///< 8 bits-per-element FMASK surface (4 samples, 4 fragments).
	kSurfaceFormatFmask16_S16_F1                        = 0x00000032, ///< 16 bits-per-element FMASK surface (16 samples, 1 fragment).
	kSurfaceFormatFmask16_S8_F2                         = 0x00000033, ///< 16 bits-per-element FMASK surface (8 samples, 2 fragments).
	kSurfaceFormatFmask32_S16_F2                        = 0x00000034, ///< 32 bits-per-element FMASK surface (16 samples, 2 fragments).
	kSurfaceFormatFmask32_S8_F4                         = 0x00000035, ///< 32 bits-per-element FMASK surface (8 samples, 4 fragments).
	kSurfaceFormatFmask32_S8_F8                         = 0x00000036, ///< 32 bits-per-element FMASK surface (8 samples, 8 fragments).
	kSurfaceFormatFmask64_S16_F4                        = 0x00000037, ///< 64 bits-per-element FMASK surface (16 samples, 4 fragments).
	kSurfaceFormatFmask64_S16_F8                        = 0x00000038, ///< 64 bits-per-element FMASK surface (16 samples, 8 fragments).
	kSurfaceFormat4_4                                   = 0x00000039, ///< Two 4-bit channels (Y,X). X=0x0F, Y=0xF0
	kSurfaceFormat6_5_5                                 = 0x0000003A, ///< One 6-bit channel (Z) and two 5-bit channels (Y,X). X=0x001F, Y=0x03E0, Z=0xFC00
	kSurfaceFormat1										= 0x0000003B, ///< One 1-bit channel. 8 pixels per byte, with pixel index increasing from LSB to MSB.
	kSurfaceFormat1Reversed								= 0x0000003C, ///< One 1-bit channel. 8 pixels per byte, with pixel index increasing from MSB to LSB.
} SurfaceFormat;
    
typedef struct (int i){
    local int i2<hidden=true> = i;
    local TEX_ENUMS DIRECT = DIRECT_OUT[i];
    uint FULL<format=hex>;
    FSkip(-4);
    uint CHANNELS_BBP_INDEX : 8<hidden=true>,
         D_TYPE  : 4<hidden=true>,
         CHANNEL1: 3<hidden=true>,
         CHANNEL2: 3<hidden=true>,
         CHANNEL3: 3<hidden=true>,
         CHANNEL4: 3<hidden=true>,
         RESERVED: 8<hidden=true>;
    local int COLOR_CHANNELS = COLOR_CHANNEL_LIST[CHANNELS_BBP_INDEX];
    local int BPP = BPP_LIST[CHANNELS_BBP_INDEX];
    local SurfaceFormat FORMAT = CHANNELS_BBP_INDEX;
    local TextureChannelType DATA_TYPE = D_TYPE;
    local BufferChannel Color1 = CHANNEL1 & 7; // 3bits
    local BufferChannel Color2 = CHANNEL2 & 7; // 3bits
    local BufferChannel Color3 = CHANNEL3 & 7; // 3bits
    local BufferChannel Color4 = CHANNEL4 & 7; // 3bits
}entry<read=Str("0x%02X - 0x%06X",this.i2, this.FULL)>;
local int i = 0;
local int count = FileSize() / 4;
LittleEndian();
for (i = 0; i < count; i++){
    entry data(i)<open=true, optimize=false>;
};
