//------------------------------------------------
//--- 010 Editor v14.0.1 Binary Template
//
//      File: 
//   Authors: 
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------
typedef enum <uint>
{
  //ImageFormat_Undefined = 0x0,
  ImageFormat_R8_Unorm = 0x201,
  ImageFormat_R8_Snorm = 0x202,
  ImageFormat_R8_Uint = 0x203,
  ImageFormat_R8_Sint = 0x204,
  ImageFormat_R4_G4_B4_A4_Unorm = 0x301,
  ImageFormat_A4_B4_G4_R4_Unorm = 0x401,
  ImageFormat_R5_G5_B5_A1_Unorm = 0x501,
  ImageFormat_A1_B5_G5_R5_Unorm = 0x601,
  ImageFormat_R5_G6_B5_Unorm = 0x701,
  ImageFormat_B5_G6_R5_Unorm = 0x801,
  ImageFormat_R8_G8_Unorm = 0x901,
  ImageFormat_R8_G8_Snorm = 0x902,
  ImageFormat_R8_G8_Uint = 0x903,
  ImageFormat_R8_G8_Sint = 0x904,
  ImageFormat_R16_Unorm = 0xA01,
  ImageFormat_R16_Snorm = 0xA02,
  ImageFormat_R16_Uint = 0xA03,
  ImageFormat_R16_Sint = 0xA04,
  ImageFormat_R16_Float = 0xA05,
  ImageFormat_D16_Unorm = 0xA07,
  ImageFormat_R8_G8_B8_A8_Unorm = 0xB01,
  ImageFormat_R8_G8_B8_A8_Snorm = 0xB02,
  ImageFormat_R8_G8_B8_A8_Uint = 0xB03,
  ImageFormat_R8_G8_B8_A8_Sint = 0xB04,
  ImageFormat_R8_G8_B8_A8_UnormSrgb = 0xB06,
  ImageFormat_B8_G8_R8_A8_Unorm = 0xC01,
  ImageFormat_B8_G8_R8_A8_Snorm = 0xC02,
  ImageFormat_B8_G8_R8_A8_Uint = 0xC03,
  ImageFormat_B8_G8_R8_A8_Sint = 0xC04,
  ImageFormat_B8_G8_R8_A8_UnormSrgb = 0xC06,
  ImageFormat_R9_G9_B9_E5_SharedExp = 0xD05,
  ImageFormat_R10_G10_B10_A2_Unorm = 0xE01,
  ImageFormat_R10_G10_B10_A2_Uint = 0xE03,
  ImageFormat_R11_G11_B10_Float = 0xF05,
  ImageFormat_B10_G11_R11_Float = 0x1005,
  ImageFormat_R16_G16_Unorm = 0x1201,
  ImageFormat_R16_G16_Snorm = 0x1202,
  ImageFormat_R16_G16_Uint = 0x1203,
  ImageFormat_R16_G16_Sint = 0x1204,
  ImageFormat_R16_G16_Float = 0x1205,
  ImageFormat_D24_Unorm_S8_Uint = 0x1307,
  ImageFormat_R32_Uint = 0x1403,
  ImageFormat_R32_Sint = 0x1404,
  ImageFormat_R32_Float = 0x1405,
  ImageFormat_D32_Float = 0x1407,
  ImageFormat_R16_G16_B16_A16_Unorm = 0x1501,
  ImageFormat_R16_G16_B16_A16_Snorm = 0x1502,
  ImageFormat_R16_G16_B16_A16_Uint = 0x1503,
  ImageFormat_R16_G16_B16_A16_Sint = 0x1504,
  ImageFormat_R16_G16_B16_A16_Float = 0x1505,
  ImageFormat_D32_Float_S8_Uint_X24 = 0x1607,
  ImageFormat_R32_G32_Uint = 0x1703,
  ImageFormat_R32_G32_Sint = 0x1704,
  ImageFormat_R32_G32_Float = 0x1705,
  ImageFormat_R32_G32_B32_Uint = 0x1803,
  ImageFormat_R32_G32_B32_Sint = 0x1804,
  ImageFormat_R32_G32_B32_Float = 0x1805,
  ImageFormat_R32_G32_B32_A32_Uint = 0x1903,
  ImageFormat_R32_G32_B32_A32_Sint = 0x1904,
  ImageFormat_R32_G32_B32_A32_Float = 0x1905,
  ImageFormat_Bc1_Unorm = 0x1A01,
  ImageFormat_Bc1_UnormSrgb = 0x1A06,
  ImageFormat_Bc2_Unorm = 0x1B01,
  ImageFormat_Bc2_UnormSrgb = 0x1B06,
  ImageFormat_Bc3_Unorm = 0x1C01,
  ImageFormat_Bc3_UnormSrgb = 0x1C06,
  ImageFormat_Bc4_Unorm = 0x1D01,
  ImageFormat_Bc4_Snorm = 0x1D02,
  ImageFormat_Bc5_Unorm = 0x1E01,
  ImageFormat_Bc5_Snorm = 0x1E02,
  ImageFormat_Bc6_Float = 0x1F05,
  ImageFormat_Bc6_Ufloat = 0x1F0A,
  ImageFormat_Bc7_Unorm = 0x2001,
  ImageFormat_Bc7_UnormSrgb = 0x2006,
  ImageFormat_Eac_R11_Unorm = 0x2101,
  ImageFormat_Eac_R11_Snorm = 0x2102,
  ImageFormat_Eac_R11_G11_Unorm = 0x2201,
  ImageFormat_Eac_R11_G11_Snorm = 0x2202,
  ImageFormat_Etc1_Unorm = 0x2301,
  ImageFormat_Etc2_Unorm = 0x2401,
  ImageFormat_Etc2_UnormSrgb = 0x2406,
  ImageFormat_Etc2_Mask_Unorm = 0x2501,
  ImageFormat_Etc2_Mask_UnormSrgb = 0x2506,
  ImageFormat_Etc2_Alpha_Unorm = 0x2601,
  ImageFormat_Etc2_Alpha_UnormSrgb = 0x2606,
  ImageFormat_Pvrtc1_2Bpp_Unorm = 0x2701,
  ImageFormat_Pvrtc1_2Bpp_UnormSrgb = 0x2706,
  ImageFormat_Pvrtc1_4Bpp_Unorm = 0x2801,
  ImageFormat_Pvrtc1_4Bpp_UnormSrgb = 0x2806,
  ImageFormat_Pvrtc1_Alpha_2Bpp_Unorm = 0x2901,
  ImageFormat_Pvrtc1_Alpha_2Bpp_UnormSrgb = 0x2906,
  ImageFormat_Pvrtc1_Alpha_4Bpp_Unorm = 0x2A01,
  ImageFormat_Pvrtc1_Alpha_4Bpp_UnormSrgb = 0x2A06,
  ImageFormat_Pvrtc2_Alpha_2Bpp_Unorm = 0x2B01,
  ImageFormat_Pvrtc2_Alpha_2Bpp_UnormSrgb = 0x2B06,
  ImageFormat_Pvrtc2_Alpha_4Bpp_Unorm = 0x2C01,
  ImageFormat_Pvrtc2_Alpha_4Bpp_UnormSrgb = 0x2C06,
  ImageFormat_Astc_4x4_Unorm = 0x2D01,
  ImageFormat_Astc_4x4_UnormSrgb = 0x2D06,
  ImageFormat_Astc_5x4_Unorm = 0x2E01,
  ImageFormat_Astc_5x4_UnormSrgb = 0x2E06,
  ImageFormat_Astc_5x5_Unorm = 0x2F01,
  ImageFormat_Astc_5x5_UnormSrgb = 0x2F06,
  ImageFormat_Astc_6x5_Unorm = 0x3001,
  ImageFormat_Astc_6x5_UnormSrgb = 0x3006,
  ImageFormat_Astc_6x6_Unorm = 0x3101,
  ImageFormat_Astc_6x6_UnormSrgb = 0x3106,
  ImageFormat_Astc_8x5_Unorm = 0x3201,
  ImageFormat_Astc_8x5_UnormSrgb = 0x3206,
  ImageFormat_Astc_8x6_Unorm = 0x3301,
  ImageFormat_Astc_8x6_UnormSrgb = 0x3306,
  ImageFormat_Astc_8x8_Unorm = 0x3401,
  ImageFormat_Astc_8x8_UnormSrgb = 0x3406,
  ImageFormat_Astc_10x5_Unorm = 0x3501,
  ImageFormat_Astc_10x5_UnormSrgb = 0x3506,
  ImageFormat_Astc_10x6_Unorm = 0x3601,
  ImageFormat_Astc_10x6_UnormSrgb = 0x3606,
  ImageFormat_Astc_10x8_Unorm = 0x3701,
  ImageFormat_Astc_10x8_UnormSrgb = 0x3706,
  ImageFormat_Astc_10x10_Unorm = 0x3801,
  ImageFormat_Astc_10x10_UnormSrgb = 0x3806,
  ImageFormat_Astc_12x10_Unorm = 0x3901,
  ImageFormat_Astc_12x10_UnormSrgb = 0x3906,
  ImageFormat_Astc_12x12_Unorm = 0x3A01,
  ImageFormat_Astc_12x12_UnormSrgb = 0x3A06,
  ImageFormat_B5_G5_R5_A1_Unorm = 0x3B01,
}ImageFormat;

   // BNTX format here for reference
typedef enum <ubyte>  
{
    BNTX_R4G4              = 0x01,  
    BNTX_R8                = 0x02,  
    BNTX_R4G4B4A4          = 0x03,  
    BNTX_A4B4G4R4          = 0x04,  
    BNTX_R5G5B5A1          = 0x05,  
    BNTX_A1B5G5R5          = 0x06,  
    BNTX_R5G6B5            = 0x07,  
    BNTX_B5G6R5            = 0x08,  
    BNTX_R8G8              = 0x09,  
    BNTX_R16               = 0x0A,  
    BNTX_R8G8B8A8          = 0x0B,  
    BNTX_B8G8R8A8          = 0x0C,  
    BNTX_R9G9B9x5          = 0x0D,  
    BNTX_R10G10B10A2       = 0x0E,  
    BNTX_R11G11B10         = 0x0F,  
    BNTX_B10G11R11         = 0x10,  
    BNTX_R10G11B11         = 0x11,  
    BNTX_R16G16            = 0x12,  
    BNTX_D24S8             = 0x13,  
    BNTX_R32               = 0x14,  
    BNTX_R16G16B16A16      = 0x15,  
    BNTX_R32G8x24          = 0x16,  
    BNTX_R32G32            = 0x17,  
    BNTX_R32G32B32         = 0x18,  
    BNTX_R32G32B32A32      = 0x19,  
    BNTX_BC1               = 0x1A,  
    BNTX_BC2               = 0x1B,  
    BNTX_BC3               = 0x1C,  
    BNTX_BC4               = 0x1D,  
    BNTX_BC5               = 0x1E,  
    BNTX_BC6H              = 0x1F,  
    BNTX_BC7               = 0x20,  
    BNTX_ETC2_EAC_R11      = 0x21,  
    BNTX_ETC2_EAC_R11_G11  = 0x22,  
    BNTX_ETC1              = 0x23,  
    BNTX_ETC2_RGB          = 0x24,  
    BNTX_ETC2_RGBA         = 0x25,  
    BNTX_ETC2_RGBA1        = 0x26,  
    BNTX_PVRTC1_2BPP       = 0x27,  
    BNTX_PVRTC1_4BPP       = 0x28,  
    BNTX_PVRTC1_ALPHA_2BPP = 0x29,  
    BNTX_PVRTC1_ALPHA_4BPP = 0x2A,  
    BNTX_PVRTC2_ALPHA_2BPP = 0x2B,  
    BNTX_PVRTC2_ALPHA_4BPP = 0x2C,  
    BNTX_ASTC4x4           = 0x2D,  
    BNTX_ASTC5x4           = 0x2E,  
    BNTX_ASTC5x5           = 0x2F,  
    BNTX_ASTC6x5           = 0x30,  
    BNTX_ASTC6x6           = 0x31,  
    BNTX_ASTC8x5           = 0x32,  
    BNTX_ASTC8x6           = 0x33,  
    BNTX_ASTC8x8           = 0x34,  
    BNTX_ASTC10x5          = 0x35,  
    BNTX_ASTC10x6          = 0x36,  
    BNTX_ASTC10x8          = 0x37,  
    BNTX_ASTC10x10         = 0x38,  
    BNTX_ASTC12x10         = 0x39,  
    BNTX_ASTC12x12         = 0x3A,  
    BNTX_B5G5R5A1          = 0x3B
} BNTX_FORMAT; 
 
typedef enum <ubyte>   
{ 
    BNTX_UNORM         = 0x01, 
    BNTX_SNORM         = 0x02, 
    BNTX_UINT          = 0x03, 
    BNTX_SINT          = 0x04, 
    BNTX_FLOAT         = 0x05, 
    BNTX_SRGB          = 0x06, 
    BNTX_DEPTH         = 0x07, 
    BNTX_UINT_2_FLOAT  = 0x08, 
    BNTX_SINT_2_FLOAT  = 0x09, 
    BNTX_UFLOAT16      = 0x0A
} BNTX_TYPE;  
        
typedef struct (int i){
    local int i2<hidden=true> = i;
    ImageFormat data1;
    ImageFormat data2;
    ImageFormat data3;
    ImageFormat data4;
    ImageFormat data5;
    ImageFormat data6;
    uint BPP;
}entry<read=Str("0x%02X",this.i2)>;
local int i = 0;
local int count = FileSize() / 28;
LittleEndian();
for (i = 0; i < count; i++){
    if(ReadUInt() == 0)
    {
        FSkip(28);
    }
    else
    {
        entry data(i)<open=true, optimize=false>;
    }
};